package sort.linkedlist;

class ListNode {
    int val;
    ListNode next;

    ListNode(int x) {
        val = x;
    }
}

public class SortList {

    ListNode head;
    int size = 0;
    ListNode tail;

    public static void main(String[] args) {
        int[] elements = {1, 3, 3, 1, 3, 1, 3, 3, 2, 3, 2, 2, 1, 1, 1, 3, 2, 2, 1, 1, 2, 2, 2, 3, 3, 1, 1, 2, 2, 2, 1,
                2, 1, 1, 2, 3, 3, 2, 2, 3, 2, 3, 2, 2
                , 2, 1, 1, 3, 2, 3, 3, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 1, 2, 2, 2, 1, 3, 2, 2, 2, 3,
                3, 2, 3, 3, 1, 1, 2, 2, 1, 2, 1, 3, 2, 1,
                3, 3, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 3, 3, 3, 1, 1, 3, 2, 1, 1, 2, 1, 3, 3, 2, 2, 1, 3, 1, 3,
                1, 3, 2, 2, 3, 2, 3, 2, 2, 1, 2, 3, 1, 3, 1, 2,
                3, 3, 2, 3, 3, 3, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 2, 3, 1, 1, 3, 1, 2, 2, 3, 2, 1, 3, 1, 2,
                1, 3, 2, 1, 1, 2, 2, 2, 1,
                3, 1, 3, 2, 3, 3, 1, 1, 3, 1, 2,
                1, 2, 3, 1, 2, 1, 1, 3, 1, 3, 3, 1, 1, 1, 2, 2, 1, 3, 1, 2, 2, 3, 2,
                1, 3, 2, 1, 3, 2, 2, 3, 3, 2, 2, 1, 3, 2, 2, 2, 2, 2,
                3, 2, 2, 3, 1, 3, 2, 1, 3,
                2, 1, 2, 3, 3, 3, 1, 2, 2, 3, 1, 1, 2, 2, 3, 2, 1, 1, 1, 1, 1, 3, 2, 2, 2,
                1, 3, 2, 1, 2, 3, 2, 1, 1, 2, 1, 3, 3, 1, 3,
                1, 2, 2, 1, 2, 3, 2, 3, 3, 1, 2, 3, 2, 2, 3, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 1, 1, 2, 1, 1, 2, 3, 3, 3,
                1, 3, 2, 2, 1, 2, 2, 1, 2, 3, 1, 3, 2, 2, 3, 3, 3, 1, 2, 3, 2, 1, 3, 1, 1, 2, 2, 1, 1, 1, 2, 2, 3, 1, 3,
                1, 2, 3, 3, 3, 2, 2, 3, 1, 1, 1, 3, 2, 1, 1, 3, 1, 2, 3, 3, 3, 2, 1, 2,
                3, 2, 3, 2, 1, 3, 2, 2, 2, 2, 1, 1,
                3, 1, 1, 1, 3, 2, 2, 2, 1, 2, 3, 2, 3, 2, 2, 1, 2, 3, 2, 1, 1, 3, 1, 3, 3, 1, 1, 1, 1, 1, 2, 3, 3, 3,
                1, 3, 2, 2, 3, 1, 1, 3, 1, 1, 1, 3, 1,
                1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 3, 3, 3, 1, 2, 2, 2, 2, 3, 3, 1, 2, 2, 3, 1, 3, 1,
                2, 1, 2, 2, 3, 3, 1, 3, 3
                , 2, 1, 3, 1, 1, 3, 1, 2, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 2, 2, 2, 1, 1, 3, 2, 2, 2, 3, 1, 31, 3, 3, 1, 3, 1, 3, 3, 2, 3, 2, 2, 1, 1, 1, 3, 2, 2, 1, 1, 2, 2, 2, 3, 3, 1, 1, 2, 2, 2, 1,
                2, 1, 1, 2, 3, 3, 2, 2, 3, 2, 3, 2, 2
                , 2, 1, 1, 3, 2, 3, 3, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 1, 2, 2, 2, 1, 3, 2, 2, 2, 3,
                3, 2, 3, 3, 1, 1, 2, 2, 1, 2, 1, 3, 2, 1,
                3, 3, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 3, 3, 3, 1, 1, 3, 2, 1, 1, 2, 1, 3, 3, 2, 2, 1, 3, 1, 3,
                1, 3, 2, 2, 3, 2, 3, 2, 2, 1, 2, 3, 1, 3, 1, 2,
                3, 3, 2, 3, 3, 3, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 2, 3, 1, 1, 3, 1, 2, 2, 3, 2, 1, 3, 1, 2,
                1, 3, 2, 1, 1, 2, 2, 2, 1,
                3, 1, 3, 2, 3, 3, 1, 1, 3, 1, 2,
                1, 2, 3, 1, 2, 1, 1, 3, 1, 3, 3, 1, 1, 1, 2, 2, 1, 3, 1, 2, 2, 3, 2,
                1, 3, 2, 1, 3, 2, 2, 3, 3, 2, 2, 1, 3, 2, 2, 2, 2, 2,
                3, 2, 2, 3, 1, 3, 2, 1, 3,
                2, 1, 2, 3, 3, 3, 1, 2, 2, 3, 1, 1, 2, 2, 3, 2, 1, 1, 1, 1, 1, 3, 2, 2, 2,
                1, 3, 2, 1, 2, 3, 2, 1, 1, 2, 1, 3, 3, 1, 3,
                1, 2, 2, 1, 2, 3, 2, 3, 3, 1, 2, 3, 2, 2, 3, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 1, 1, 2, 1, 1, 2, 3, 3, 3,
                1, 3, 2, 2, 1, 2, 2, 1, 2, 3, 1, 3, 2, 2, 3, 3, 3, 1, 2, 3, 2, 1, 3, 1, 1, 2, 2, 1, 1, 1, 2, 2, 3, 1, 3,
                1, 2, 3, 3, 3, 2, 2, 3, 1, 1, 1, 3, 2, 1, 1, 3, 1, 2, 3, 3, 3, 2, 1, 2,
                3, 2, 3, 2, 1, 3, 2, 2, 2, 2, 1, 1,
                3, 1, 1, 1, 3, 2, 2, 2, 1, 2, 3, 2, 3, 2, 2, 1, 2, 3, 2, 1, 1, 3, 1, 3, 3, 1, 1, 1, 1, 1, 2, 3, 3, 3,
                1, 3, 2, 2, 3, 1, 1, 3, 1, 1, 1, 3, 1,
                1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 3, 3, 3, 1, 2, 2, 2, 2, 3, 3, 1, 2, 2, 3, 1, 3, 1,
                2, 1, 2, 2, 3, 3, 1, 3, 3
                , 2, 1, 3, 1, 1, 3, 1, 2, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 2, 2, 2, 1, 1, 3, 2, 2, 2, 3, 1, 3,1, 3, 3, 1, 3, 1, 3, 3, 2, 3, 2, 2, 1, 1, 1, 3, 2, 2, 1, 1, 2, 2, 2, 3, 3, 1, 1, 2, 2, 2, 1,
                2, 1, 1, 2, 3, 3, 2, 2, 3, 2, 3, 2, 2
                , 2, 1, 1, 3, 2, 3, 3, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 1, 2, 2, 2, 1, 3, 2, 2, 2, 3,
                3, 2, 3, 3, 1, 1, 2, 2, 1, 2, 1, 3, 2, 1,
                3, 3, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 3, 3, 3, 1, 1, 3, 2, 1, 1, 2, 1, 3, 3, 2, 2, 1, 3, 1, 3,
                1, 3, 2, 2, 3, 2, 3, 2, 2, 1, 2, 3, 1, 3, 1, 2,
                3, 3, 2, 3, 3, 3, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 2, 3, 1, 1, 3, 1, 2, 2, 3, 2, 1, 3, 1, 2,
                1, 3, 2, 1, 1, 2, 2, 2, 1,
                3, 1, 3, 2, 3, 3, 1, 1, 3, 1, 2,
                1, 2, 3, 1, 2, 1, 1, 3, 1, 3, 3, 1, 1, 1, 2, 2, 1, 3, 1, 2, 2, 3, 2,
                1, 3, 2, 1, 3, 2, 2, 3, 3, 2, 2, 1, 3, 2, 2, 2, 2, 2,
                3, 2, 2, 3, 1, 3, 2, 1, 3,
                2, 1, 2, 3, 3, 3, 1, 2, 2, 3, 1, 1, 2, 2, 3, 2, 1, 1, 1, 1, 1, 3, 2, 2, 2,
                1, 3, 2, 1, 2, 3, 2, 1, 1, 2, 1, 3, 3, 1, 3,
                1, 2, 2, 1, 2, 3, 2, 3, 3, 1, 2, 3, 2, 2, 3, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 1, 1, 2, 1, 1, 2, 3, 3, 3,
                1, 3, 2, 2, 1, 2, 2, 1, 2, 3, 1, 3, 2, 2, 3, 3, 3, 1, 2, 3, 2, 1, 3, 1, 1, 2, 2, 1, 1, 1, 2, 2, 3, 1, 3,
                1, 2, 3, 3, 3, 2, 2, 3, 1, 1, 1, 3, 2, 1, 1, 3, 1, 2, 3, 3, 3, 2, 1, 2,
                3, 2, 3, 2, 1, 3, 2, 2, 2, 2, 1, 1,
                3, 1, 1, 1, 3, 2, 2, 2, 1, 2, 3, 2, 3, 2, 2, 1, 2, 3, 2, 1, 1, 3, 1, 3, 3, 1, 1, 1, 1, 1, 2, 3, 3, 3,
                1, 3, 2, 2, 3, 1, 1, 3, 1, 1, 1, 3, 1,
                1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 3, 3, 3, 1, 2, 2, 2, 2, 3, 3, 1, 2, 2, 3, 1, 3, 1,
                2, 1, 2, 2, 3, 3, 1, 3, 3
                , 2, 1, 3, 1, 1, 3, 1, 2, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 2, 2, 2, 1, 1, 3, 2, 2, 2, 3, 1, 3};

        SortList sortList = new SortList();
        sortList.buildList(elements);

        System.out.println("*BEFORE SORT**");
        sortList.print();
        System.out.println("***********");

        sortList.sortList();

        System.out.println("*AFTER SORT**");
        sortList.print();
        System.out.println("***********");
    }

    private void buildList(int[] elements) {
        head = null;
        ListNode node = null;

        for (int element : elements) {
            if (head == null) {
                head = new ListNode(element);
                node = head;
            } else {
                node.next = new ListNode(element);
                node = node.next;
            }
        }
    }

    public void sortList() {
        ListNode node = head;
        size = 0;
        while (node != null) {
            tail = node;
            node = node.next;
            size++;
        }

        quickSort(1, size);

    }


    public void quickSort(int low, int high) {
        if (low < high) {
            int partition = partition(low, high);
            quickSort(low, partition - 1);
            quickSort(partition + 1, high);
        }
    }

    public int partition(int low, int high) {
        System.out.println("Low: " + low + " High: " + high);
        ListNode pivot = high == size ? tail : nodeAt(high);
        int i = low - 1;

        ListNode iNode = i > 0 ? nodeAt(i) : null;
        ListNode jNode = iNode != null ? iNode.next : nodeAt(low);

        for (int j = low; j <= high; j++) {
            if (jNode.val < pivot.val) {
                i++;
                if (iNode == null) {
                    iNode = head;
                } else {
                    iNode = iNode.next;
                }
                swap(iNode, jNode);

//                print();
            }
            jNode = jNode.next;
        }
        i++;

        if (iNode == null) {
            iNode = head;
        } else {
            iNode = iNode.next;
        }
        swap(iNode, pivot);
//        print();
        return i;
    }

    private ListNode nodeAt(int position) {

        ListNode node = head;
        int size = 1;

        while (size++ < position) {
            node = node.next;
        }

//        System.out.println("Position # " + position + " value = " + node.val);

        return node;
    }

    private void swap(ListNode x, ListNode y) {
        int temp = x.val;
        x.val = y.val;
        y.val = temp;
    }

    private void print() {
        ListNode node = head;
        while (node != null) {
            System.out.print(node.val + " -> ");
            node = node.next;
        }
        System.out.println();
    }
}
